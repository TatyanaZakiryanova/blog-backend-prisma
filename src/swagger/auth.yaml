paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/me:
    get:
      tags:
        - Auth
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh access token using refresh token cookie
      security:
        - cookieAuth: []
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New JWT access token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: password123

    RegisterInput:
      type: object
      required:
        - email
        - password
        - fullName
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: password123
        fullName:
          type: string
          example: John Doe
        avatarUrl:
          type: string
          nullable: true
          example: null

    AuthResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
        data:
          type: object
          required:
            - id
            - fullName
            - email
            - createdAt
            - updatedAt
            - accessToken
          properties:
            id:
              type: integer
              example: 25
            fullName:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: user@example.com
            avatarUrl:
              type: string
              nullable: true
              example: null
            createdAt:
              type: string
              format: date-time
              example: 2025-05-24T03:28:03.020Z
            updatedAt:
              type: string
              format: date-time
              example: 2025-05-24T03:28:03.020Z
            accessToken:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

    UserInfoResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: User data retrieved successfully
        data:
          type: object
          required:
            - id
            - fullName
            - email
            - createdAt
            - updatedAt
          properties:
            id:
              type: integer
              example: 25
            fullName:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: user@example.com
            avatarUrl:
              type: string
              nullable: true
              example: null
            createdAt:
              type: string
              format: date-time
              example: 2025-05-24T03:28:03.020Z
            updatedAt:
              type: string
              format: date-time
              example: 2025-05-24T03:28:03.020Z

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Unauthorized (token missing or invalid)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: No token provided

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Validation failed

    AuthorizationError:
      description: Incorrect login or password
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Incorrect login or password

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Resource not found

    ConflictError:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: User already exists

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Internal server error
