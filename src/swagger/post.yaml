paths:
  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      parameters:
        - in: query
          name: sort
          schema:
            type: string
          description: Sort by popular or newest
        - in: query
          name: tag
          schema:
            type: string
          description: Filter posts by tag
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Number of posts per page
      responses:
        '200':
          description: Successful retrieval of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '500':
          description: Internal server error

    post:
      tags:
        - Posts
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Validation failed
        '401':
          description: Unauthorized (token missing or invalid)
        '500':
          description: Internal server error

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get one post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      responses:
        '200':
          description: Successful retrieval of post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '500':
          description: Internal server error

    patch:
      tags:
        - Posts
      summary: Update a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Validation failed
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Access denied
        '404':
          description: Post not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Posts
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Post deleted successfully
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Access denied
        '404':
          description: Post not found
        '500':
          description: Internal server error

  /posts/{id}/comments:
    get:
      tags:
        - Comments
      summary: Get all comments for post
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments for the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'
        '500':
          description: Internal server error

    post:
      tags:
        - Comments
      summary: Create a new comment on a post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Validation failed
        '401':
          description: Unauthorized (token missing or invalid)
        '404':
          description: Post not found
        '500':
          description: Internal server error

components:
  schemas:
    PostInput:
      type: object
      required:
        - title
        - text
        - tags
      properties:
        title:
          type: string
          example: Header
        text:
          type: string
          example: Hello world
        tags:
          type: array
          items:
            type: string
          example: [react]
        imageUrl:
          type: string
          nullable: true
          example: null

    PostResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: Post created successfully
        data:
          $ref: '#/components/schemas/Post'

    PostListResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: List of all posts
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'

    Post:
      type: object
      required:
        - id
        - title
        - text
        - tags
        - viewsCount
        - commentsCount
        - createdAt
        - updatedAt
        - user
      properties:
        id:
          type: integer
          example: 25
        title:
          type: string
          example: Header
        text:
          type: string
          example: Hello world
        tags:
          type: array
          items:
            type: string
          example: [react]
        viewsCount:
          type: integer
        commentsCount:
          type: integer
        imageUrl:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          type: object
          properties:
            id:
              type: integer
              example: 25
            fullName:
              type: string
              example: Admin
            avatarUrl:
              type: string
              nullable: true
              example: null

    CommentInput:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          example: My comment

    CommentListResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: List of all comments
        data:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    CommentResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: Comment created successfully
        data:
          $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      required:
        - id
        - text
        - postId
        - userId
        - createdAt
        - updatedAt
        - user
      properties:
        id:
          type: integer
          example: 20
        text:
          type: string
          example: My comment
        postId:
          type: integer
          example: 5
        userId:
          type: integer
          example: 25
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          type: object
          properties:
            id:
              type: integer
              example: 25
            fullName:
              type: string
              example: Admin
            avatarUrl:
              type: string
              nullable: true
              example: null

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
