paths:
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserListResponse'
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Insufficient role
        '404':
          description: User not found
        '500':
          description: Internal server error

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserResponse'
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Insufficient role
        '404':
          description: User not found
        '500':
          description: Internal server error

    delete:
      tags:
        - Admin
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: User deleted successfully
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Insufficient role
        '404':
          description: User not found
        '500':
          description: Internal server error

  /admin/posts/{id}:
    delete:
      tags:
        - Admin
      summary: Delete post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Post deleted successfully
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Insufficient role
        '404':
          description: Post not found
        '500':
          description: Internal server error

  /admin/comments/{id}:
    delete:
      tags:
        - Admin
      summary: Delete comment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Comment deleted successfully
        '401':
          description: Unauthorized (token missing or invalid)
        '403':
          description: Insufficient role
        '404':
          description: Comment not found
        '500':
          description: Internal server error

components:
  schemas:
    AdminUserResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: User found
        data:
          $ref: '#/components/schemas/AdminUser'

    AdminUserListResponse:
      type: object
      required:
        - message
        - data
      properties:
        message:
          type: string
          example: List of all users
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdminUser'

    AdminUser:
      type: object
      required:
        - id
        - fullName
        - email
        - createdAt
        - updatedAt
        - role
      properties:
        id:
          type: integer
          example: 25
        fullName:
          type: string
          example: Admin
        email:
          type: string
          format: email
          example: admin@example.com
        avatarUrl:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        role:
          type: string
          enum:
            - USER
            - ADMIN

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
